import glob
import os

# to unlock run: snakemake --config config_file_name=results/test_config --unlock --cores all

# Use the config file to define relevant variables

def parse_variables(file_path):
    keys = ["data_path", "coord_d","query_list_dir", "oh_d1", "oh_d2","oh_d3", "blosum1", "blosum2","blosum3","gap_open", "gap_extend", "w1", "w2","w3","use_two","use_three","jaccard_blosum_list","blurry","lam", "lam2","lam3","k","k2","k3","refs"]
    variables = {key: None for key in keys}
    
    # Open the file and read its contents
    with open(file_path, 'r') as file:
        for line in file:
            # Strip whitespace and split by colon
            parts = line.strip().split(':')
            if len(parts) == 2:
                key = parts[0].strip()  # Key part
                value = parts[1].strip()  # Value part
                if value == '': continue
                # Store values in the dictionary based on their type
                if key in ["data_path", "coord_d","query_list_dir", "oh_d1", "oh_d2", "oh_d3", "blosum1", "blosum2", "blosum3","jaccard_blosum_list","refs"]:
                    variables[key] = value  #
                elif key in ["gap_open", "gap_extend", "w1", "w2","w3", "lam", "lam2","lam3","k","k2","k3"]:
                    variables[key] = float(value)  
                elif key in ["use_two","blurry","use_three"]:
                    if value in ["True","true"]: 
                        variables[key] = True

    return variables


# Parse variables
variables = parse_variables(config["config_file_name"])
for key, val in variables.items():
    print(f"{key}: {val}")

# Set names of directories
results_dir = f"{config['config_file_name']}_results" # put directory in same place as the config file; call it config_name_results
query_list_dir = f"{variables['data_path']}/{variables['query_list_dir']}"

# Create the results directory if it doesn't exist
os.makedirs(results_dir, exist_ok=True)

# Get all CSV files in the query_list_dir
query_lists = sorted(glob.glob(os.path.join(query_list_dir, "query_list_*.csv")))
print(query_lists)

# Define the main rule that specifies all expected output files
rule all:
    input:
        expand(os.path.join(results_dir, "{query_list}.output"), query_list=[ os.path.basename(q) for q in query_lists])

# Rule to run the program with each query list file

if variables["use_two"]:
    rule process_query_list_combo:
        input:
            allca=f"{variables['data_path']}/{variables['coord_d']}",              
            refs=f"{variables['data_path']}/{variables['refs']}",              
            query=lambda wildcards: os.path.join(query_list_dir, f"{wildcards.query}"),  
            mat1=f"{variables['data_path']}/{variables['blosum1']}",              
            oh1=f"{variables['data_path']}/{variables['oh_d1']}",
            mat2=f"{variables['data_path']}/{variables['blosum2']}",              
            oh2=f"{variables['data_path']}/{variables['oh_d2']}",
        output:
            os.path.join(results_dir, "{query}.output")
        resources:
            mem_mb=80000,  # X000 Request X GB of memory
            cpus = 30,
            time="3:00:00"
        params:
            script="query_list_by_all.py",  # Path to your Python script
            gap_open= variables["gap_open"],   # Gap opening penalty
            gap_extend=variables["gap_extend"], # Gap extension penalty
            w1=variables["w1"], # weight of first alphabet
            w2=variables["w2"], # weight of second alphabet
            lam=variables['lam'],
            k=variables['k'],
            lam2=variables['lam2'],
            k2=variables['k2']
        shell:
            """
            python {params.script} {input.allca} {input.query} {input.refs} {input.mat1} {input.oh1} \
            --blosum2_path {input.mat2} --oh2_path {input.oh2} \
            --w1 {params.w1} --w2 {params.w2} \
            --gap_open {params.gap_open} --gap_extend {params.gap_extend} \
            --lam {params.lam} --k {params.k} --lam2 {params.lam2} --k2 {params.k2} \
            --out_location {results_dir}
            """          
elif variables["use_three"]:
    rule process_query_list_combo_3:
        input:
            allca=f"{variables['data_path']}/{variables['coord_d']}",              
            refs=f"{variables['data_path']}/{variables['refs']}",              
            query=lambda wildcards: os.path.join(query_list_dir, f"{wildcards.query}"),  
            mat1=f"{variables['data_path']}/{variables['blosum1']}",              
            oh1=f"{variables['data_path']}/{variables['oh_d1']}",
            mat2=f"{variables['data_path']}/{variables['blosum2']}",              
            oh2=f"{variables['data_path']}/{variables['oh_d2']}",
            mat3=f"{variables['data_path']}/{variables['blosum3']}",              
            oh3=f"{variables['data_path']}/{variables['oh_d3']}"
        output:
            os.path.join(results_dir, "{query}.output")
        resources:
            mem_mb=80000,  # X000 Request X GB of memory
            cpus = 30,
            time="3:00:00"
        params:
            script="query_list_by_all.py",  # Path to your Python script
            gap_open= variables["gap_open"],   # Gap opening penalty
            gap_extend=variables["gap_extend"], # Gap extension penalty
            w1=variables["w1"], # weight of first alphabet
            w2=variables["w2"], # weight of second alphabet
            w3=variables["w3"], # weight of third alphabet
            lam=variables['lam'],
            k=variables['k'],
            lam2=variables['lam2'],
            k2=variables['k2'],
            lam3=variables['lam3'],
            k3=variables['k3']
        shell:
            """
            python {params.script} {input.allca} {input.query} {input.refs} {input.mat1} {input.oh1} \
            --blosum2_path {input.mat2}  --blosum3_path {input.mat3} --oh2_path {input.oh2} --oh3_path {input.oh3} \
            --w1 {params.w1} --w2 {params.w2} --w3 {params.w3} \
            --gap_open {params.gap_open} --gap_extend {params.gap_extend} \
            --lam {params.lam} --k {params.k} --lam2 {params.lam2} --k2 {params.k2} --lam3 {params.lam3} --k3 {params.k3} \
            --out_location {results_dir}
            """
elif variables["blurry"]:
    rule process_query_list_blurry:
        input:
            allca=f"{variables['data_path']}/{variables['coord_d']}",              
            query=lambda wildcards: os.path.join(query_list_dir, f"{wildcards.query}"),  
            refs=f"{variables['data_path']}/{variables['refs']}",              
            mat1=f"{variables['data_path']}/{variables['blosum1']}",              
            oh1=f"{variables['data_path']}/{variables['oh_d1']}",
            bjl=f"{variables['data_path']}/{variables['jaccard_blosum_list']}",              
        output:
            os.path.join(results_dir, "{query}.output")
        resources:
            mem_mb=240000,  # X000 Request X GB of memory
            cpus = 90,    #originallly run with 16/60; gettting the last few 24/90
            time="5:00:00"
        params:
            script="query_list_by_all.py",  # Path to your Python script
            gap_open= variables["gap_open"],   # Gap opening penalty
            gap_extend=variables["gap_extend"], # Gap extension penalty
            lam=variables['lam'],
            k=variables['k'],
        shell:
            """
            python {params.script} {input.allca} {input.query} {input.refs} {input.mat1} {input.oh1} \
            --jaccard_blosum_list {input.bjl} --batch_size 64 \
            --gap_open {params.gap_open} --gap_extend {params.gap_extend} \
            --lam {params.lam} --k {params.k} \
            --out_location {results_dir}
            """
            
else:
    rule process_query_list_single:
        input:
            allca=f"{variables['data_path']}/{variables['coord_d']}",              
            query=lambda wildcards: os.path.join(query_list_dir, f"{wildcards.query}"), 
            refs=f"{variables['data_path']}/{variables['refs']}",              
            mat1=f"{variables['data_path']}/{variables['blosum1']}",              
            oh1=f"{variables['data_path']}/{variables['oh_d1']}"  
        output:
            os.path.join(results_dir, "{query}.output")
        resources:
            mem_mb= 80000,  # X000 Request X GB of memorycat
            cpus = 30,     
            time="3:00:00"
        params:
            script="query_list_by_all.py",  # Path to your Python script
            gap_open= variables["gap_open"],   # Gap opening penalty
            gap_extend=variables["gap_extend"], # Gap extension penalty
            lam=variables['lam'],
            k=variables['k'],
        shell:
            """
            python {params.script} {input.allca} {input.query} {input.refs} {input.mat1} {input.oh1} \
            --gap_open {params.gap_open} --gap_extend {params.gap_extend} \
            --lam {params.lam} --k {params.k} \
            --out_location {results_dir}
            """
                             
